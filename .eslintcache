[{"C:\\Users\\USER\\React\\social-media-client\\src\\redux\\actions.js":"1","C:\\Users\\USER\\React\\social-media-client\\src\\components\\nav-footer\\nav-footer.jsx":"2","C:\\Users\\USER\\React\\social-media-client\\src\\redux\\store.js":"3","C:\\Users\\USER\\React\\social-media-client\\src\\redux\\reducers.js":"4","C:\\Users\\USER\\React\\social-media-client\\src\\index.js":"5","C:\\Users\\USER\\React\\social-media-client\\src\\utils\\index.js":"6","C:\\Users\\USER\\React\\social-media-client\\src\\containers\\memberlist\\member-list.jsx":"7","C:\\Users\\USER\\React\\social-media-client\\src\\containers\\message\\message.jsx":"8","C:\\Users\\USER\\React\\social-media-client\\src\\containers\\friends\\friends.jsx":"9","C:\\Users\\USER\\React\\social-media-client\\src\\containers\\chat\\chat.jsx":"10","C:\\Users\\USER\\React\\social-media-client\\src\\containers\\main\\main.jsx":"11","C:\\Users\\USER\\React\\social-media-client\\src\\containers\\personal\\personal.jsx":"12","C:\\Users\\USER\\React\\social-media-client\\src\\components\\user-list\\user-list.jsx":"13","C:\\Users\\USER\\React\\social-media-client\\src\\components\\friend-list\\friend-list.jsx":"14","C:\\Users\\USER\\React\\social-media-client\\src\\containers\\profile\\profile.jsx":"15","C:\\Users\\USER\\React\\social-media-client\\src\\components\\not-found\\not-found.jsx":"16","C:\\Users\\USER\\React\\social-media-client\\src\\components\\profile-detail\\profile-detail.jsx":"17","C:\\Users\\USER\\React\\social-media-client\\src\\redux\\action-types.js":"18","C:\\Users\\USER\\React\\social-media-client\\src\\containers\\register\\register.jsx":"19","C:\\Users\\USER\\React\\social-media-client\\src\\api\\index.js":"20","C:\\Users\\USER\\React\\social-media-client\\src\\api\\hubHelper.js":"21"},{"size":10179,"mtime":1612177412053,"results":"22","hashOfConfig":"23"},{"size":4020,"mtime":1609562328466,"results":"24","hashOfConfig":"23"},{"size":201,"mtime":1606406171794,"results":"25","hashOfConfig":"23"},{"size":4508,"mtime":1609574397743,"results":"26","hashOfConfig":"23"},{"size":782,"mtime":1607007148080,"results":"27","hashOfConfig":"23"},{"size":752,"mtime":1609569032293,"results":"28","hashOfConfig":"23"},{"size":844,"mtime":1611986634831,"results":"29","hashOfConfig":"23"},{"size":5827,"mtime":1612179771827,"results":"30","hashOfConfig":"23"},{"size":986,"mtime":1611986645748,"results":"31","hashOfConfig":"23"},{"size":11459,"mtime":1612178316566,"results":"32","hashOfConfig":"23"},{"size":6939,"mtime":1611991183869,"results":"33","hashOfConfig":"23"},{"size":6309,"mtime":1609600782380,"results":"34","hashOfConfig":"23"},{"size":4916,"mtime":1609599225630,"results":"35","hashOfConfig":"23"},{"size":6023,"mtime":1609599439628,"results":"36","hashOfConfig":"23"},{"size":1536,"mtime":1609572183961,"results":"37","hashOfConfig":"23"},{"size":814,"mtime":1609601026795,"results":"38","hashOfConfig":"23"},{"size":4954,"mtime":1609601223285,"results":"39","hashOfConfig":"23"},{"size":573,"mtime":1609574147566,"results":"40","hashOfConfig":"23"},{"size":4442,"mtime":1606559280522,"results":"41","hashOfConfig":"23"},{"size":2215,"mtime":1612178250940,"results":"42","hashOfConfig":"23"},{"size":891,"mtime":1612165557434,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},"m51rdt",{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"51"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"51"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\USER\\React\\social-media-client\\src\\redux\\actions.js",["95","96"],"import { reqRegister, reqLogin, reqUpdateUser, reqUser, reqPersonal, reqUserDetail, reqSelectOption, reqFriend, reqAddFriend, reqDeleteFriend,reqMessage,reqMessageList,reqUnreadTotal,reqSaveMsg,reqUpdateUnread } from '../api/index';\r\nimport { SUCCESS_CODE } from '../api/respcode';\r\nimport { AUTH_SUCCESS, ERR_MSG, RECIEVE_USER, RESET_USER, RECIEVE_OPTIONS, RECIEVE_USERS, CONNECT_SUCCESS,RECIEVE_MSG,RECIEVE_MSG_LIST,RECIEVE_UNREAD_TOTAL,RESET_USER_DETAIL } from './action-types';\r\n\r\nimport { connectHub } from '../api/hubHelper';\r\nimport { getCookies,setCookies,removeCookies } from '../utils/index';\r\n\r\n\r\n//同步 (要分發的action)\r\nconst authSucess = (user) => ({ type: AUTH_SUCCESS, data: user });\r\nconst errorMsg = (msg) => ({ type: ERR_MSG, data: msg });\r\n\r\nconst recieveUser = (user) => ({ type: RECIEVE_USER, data: user });\r\nconst resetUser = (msg) => ({ type: RESET_USER, data: msg });\r\n\r\nconst resetUserDetail = (msg) => ({ type: RESET_USER_DETAIL, data: msg });\r\n\r\nconst recieveUsers = (user) => ({ type: RECIEVE_USERS, data: user });\r\n\r\nconst recieveOptions = (options) => ({ type: RECIEVE_OPTIONS, data: options });\r\n\r\n//chathub 連線\r\nconst recieveConnectHub = (hubConnection) => ({ type: CONNECT_SUCCESS, data: hubConnection });\r\n\r\n//獲取訊息\r\nconst recieveMsg =(data)=>({type: RECIEVE_MSG,data:data});\r\n\r\nconst recieveMsgList=(data)=>({type:RECIEVE_MSG_LIST,data:data});\r\n\r\nconst recieveUnreadTotal = (data)=>({type: RECIEVE_UNREAD_TOTAL,data:data});\r\n\r\n//http://localhost:56825/register\r\n\r\n//異步\r\nexport const register = (user) => {\r\n\r\n    const { username, password, confirm } = user;\r\n    //前端驗證輸入資料是否正確\r\n    if (!username) {\r\n        return errorMsg(\"用戶名不得為空\")\r\n    } else if (password !== confirm) {\r\n        //異步的才需要dispatch\r\n        return errorMsg(\"2次密碼不一致\")\r\n    }\r\n\r\n\r\n    //表單數據合法\r\n    return async (dispatch) => {\r\n        //reqRegister 返回的 是一個promise obj，要用then 才能得到回傳的結果\r\n        // const response = reqRegister(user).then(response => {\r\n        //     const result = response.data;\r\n        // });\r\n\r\n        //可以修改成await 會自動時做then 可以直接拿到後端回傳結果\r\n        const response = await reqRegister(user);\r\n        const result = response.data;\r\n        console.log(result);\r\n        //後台回傳的訊息 { code:0 , msg: \"註冊成功\" , data: { username: \"austin\", gender: \"男\", memberid: 1, isRegist: true } }\r\n        if (result.code === SUCCESS_CODE) {\r\n            //成功\r\n            //設置Cookie\r\n            setCookies(result.data.memberID);\r\n            //Cookies.set(\"userid\", result.data.memberID, { expires: 7 });\r\n            //分發(dispatch) 成功的action\r\n            dispatch(authSucess(result.data));\r\n        } else {\r\n            //失敗\r\n            //分發(dispatch) 失敗的action\r\n            dispatch(errorMsg(result.msg));\r\n        }\r\n    }\r\n}\r\n\r\nexport const login = (user) => {\r\n\r\n    const { username, password } = user;\r\n    //前端驗證輸入資料是否正確\r\n    if (!username) {\r\n        return errorMsg(\"用戶名不得為空\")\r\n    } else if (!password) {\r\n        //異步的才需要dispatch\r\n        return errorMsg(\"密碼不得為空\")\r\n    }\r\n\r\n    return async (dispatch) => {\r\n        const response = await reqLogin(user);\r\n        const result = response.data;\r\n        if (result.code === SUCCESS_CODE) {\r\n            //成功\r\n            console.log(result);\r\n            //設置Cookie\r\n            const userid = getCookies();\r\n            if (!userid) {\r\n                setCookies(result.data.memberID);\r\n                //Cookies.set(\"userid\", result.data.memberID, { expires: 7 });\r\n            }\r\n            //分發(dispatch) 成功的action\r\n            dispatch(authSucess(result.data));\r\n        } else {\r\n            //失敗\r\n            //分發(dispatch) 失敗的action\r\n            dispatch(errorMsg(result.msg));\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateUser = (user) => {\r\n\r\n    //返回一個函數\r\n    return async (dispatch) => {\r\n        const response = await reqUpdateUser(user);\r\n        const reult = response.data;\r\n        if (reult.code === SUCCESS_CODE) {//更新成功: data\r\n            dispatch(recieveUser(reult.data));\r\n        } else {//更新失敗: msg\r\n            dispatch(resetUser(reult.msg));\r\n        }\r\n    }\r\n}\r\n\r\n//獲取用戶列表\r\nexport const getUser = ({ memberid }) => {\r\n\r\n    //異步ajax\r\n    return async (dispatch) => {\r\n        const response = await reqUser({ memberid });\r\n        const result = response.data;\r\n        //後端回傳訊息成功\r\n        if (result.code === SUCCESS_CODE) {\r\n            dispatch(recieveUsers(result.data));\r\n        }\r\n    }\r\n}\r\n\r\n//獲取朋友列表\r\nexport const getFrined = ({ memberid }) => {\r\n\r\n    //異步ajax\r\n    return async (dispatch) => {\r\n        const response = await reqFriend({ memberid });\r\n        const result = response.data;\r\n        //後端回傳訊息成功\r\n        if (result.code === SUCCESS_CODE) {\r\n            dispatch(recieveUsers(result.data));\r\n        }\r\n    }\r\n}\r\n\r\n//加好友\r\nexport const addFriend = (user) => {\r\n\r\n    //異步ajax\r\n    return async (dispatch) => {\r\n        const response = await reqAddFriend(user);\r\n        const result = response.data;\r\n        console.log(result.msg);\r\n        //後端回傳訊息成功\r\n        if (result.code === SUCCESS_CODE) {\r\n            dispatch(recieveUsers(result.data));\r\n        }\r\n    }\r\n}\r\n\r\n//刪除好友\r\nexport const delFriend = (user) => {\r\n    console.log(\"要刪除的資料\", user);\r\n    //const {memberid,friendid}=user;\r\n\r\n\r\n    //異步ajax\r\n    return async (dispatch) => {\r\n        const response = await reqDeleteFriend(user);\r\n        const result = response.data;\r\n        console.log(result.msg);\r\n        //後端回傳訊息成功\r\n        if (result.code === SUCCESS_CODE) {\r\n            dispatch(recieveUsers(result.data));\r\n        }\r\n    }\r\n}\r\n\r\n//獲取個人信息\r\nexport const getPersonal = ({ memberid }) => {\r\n    console.log(\"跑getPersonal\");\r\n    return async (dispatch) => {\r\n        const response = await reqPersonal({ memberid });\r\n        const result = response.data;\r\n        //後端回傳訊息成功\r\n        if (result.code === SUCCESS_CODE) {\r\n            console.log(result.data)\r\n            dispatch(recieveUser(result.data));\r\n        } else {\r\n            dispatch(resetUser(result.msg));\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n//獲取興趣、偏好類型\r\nexport const getSelectOption = () => {\r\n    return async (dispatch) => {\r\n        const response = await reqSelectOption();\r\n        const result = response.data;\r\n        if (result.code === SUCCESS_CODE) {\r\n            console.log(result.data)\r\n            dispatch(recieveOptions(result.data));\r\n        } else {\r\n            dispatch(resetUser(result.msg));\r\n        }\r\n    }\r\n}\r\n\r\n//獲取用戶信息\r\nexport const getUserDetail = ({ memberid, username }) => {\r\n    console.log(\"跑getUserDetail\");\r\n    return async (dispatch) => {\r\n        const response = await reqUserDetail({ memberid, username });\r\n        const result = response.data;\r\n        //後端回傳訊息成功\r\n        if (result.code === SUCCESS_CODE) {\r\n            console.log(result.data)\r\n            dispatch(recieveUser(result.data));\r\n        } else {\r\n            dispatch(resetUserDetail(result.msg));\r\n        }\r\n\r\n    }\r\n}\r\n\r\n//登出\r\nexport const logout = () => {\r\n    return async (dispatch) => {\r\n        removeCookies();\r\n        //Cookies.remove(\"userid\");\r\n        console.log(\"清除cookie\");\r\n        dispatch(resetUser(\"登出成功\"));\r\n    }\r\n\r\n}\r\n\r\n\r\n//chathub連線\r\nexport const connectToHub = (memberid) => {\r\n    //創建一個實例\r\n    // const HubConnection = new HubConnectionBuilder()\r\n    //     .withUrl(`${process.env.REACT_APP_URL}/chathub`).withAutomaticReconnect().build();\r\n\r\n    // const hub =HubConnection;\r\n    return async (dispatch) => {\r\n        //連線\r\n        const result = await connectHub(memberid);\r\n\r\n        console.log(\"連線結果\", result);\r\n        // HubConnection.invoke(\"AddConnectList\", memberid, \"\")\r\n        //     .catch(err => console.log(err));\r\n\r\n        if(result.hub){\r\n            dispatch(recieveConnectHub(result.hub));\r\n        }else{\r\n\r\n        }\r\n\r\n        \r\n        \r\n        \r\n    }\r\n}\r\n\r\n//獲取訊息\r\nexport const getMsg =({memberid,recieveid})=>{\r\n    return async (dispatch)=>{\r\n        const response = await reqMessage({memberid,recieveid});\r\n        const result= response.data;\r\n        //後端回傳訊息成功\r\n        if (result.code === SUCCESS_CODE) {\r\n            console.log(result.data)\r\n            dispatch(recieveMsg(result.data));\r\n        } else {\r\n            console.log(\"不明原因失敗\",result.data)\r\n        }\r\n        \r\n    }\r\n}\r\n\r\n//獲取對每個用戶的最後訊息\r\nexport const getMsgList =({memberid})=>{\r\n    return async (dispatch) =>{\r\n        const response =await reqMessageList({memberid});\r\n        const result =response.data;\r\n        //後端回傳訊息成功\r\n        if (result.code === SUCCESS_CODE) {\r\n            console.log(result.data)\r\n            dispatch(recieveMsgList(result.data));\r\n        } else {\r\n            console.log(\"不明原因失敗\",result.data)\r\n        }\r\n    }\r\n}\r\n\r\nexport const getMsgUnread = ({memberid})=>{\r\n    return async (dispatch)=>{\r\n        const response =await reqUnreadTotal({memberid});\r\n        const result =response.data;\r\n        //後端回傳訊息成功\r\n        if (result.code === SUCCESS_CODE) {\r\n            console.log(result.data)\r\n            dispatch(recieveUnreadTotal(result.data));\r\n        } else {\r\n            console.log(\"不明原因失敗\",result.data)\r\n        }\r\n    }\r\n}\r\n\r\n//修改成已讀\r\nexport const updateToRead = ({memberid,recieveid})=>{\r\n    return async (dispatch)=>{\r\n        const response =await reqUpdateUnread({memberid,recieveid});\r\n    }\r\n}\r\n\r\n//儲存訊息\r\nexport const saveChatMsgs = ({memberid,recieveid,input})=>{\r\n    return async (dispatch)=>{\r\n        const response =await reqSaveMsg({memberid,recieveid,input});\r\n    }\r\n}","C:\\Users\\USER\\React\\social-media-client\\src\\components\\nav-footer\\nav-footer.jsx",["97"],"C:\\Users\\USER\\React\\social-media-client\\src\\redux\\store.js",[],["98","99"],"C:\\Users\\USER\\React\\social-media-client\\src\\redux\\reducers.js",["100","101"],"import { combineReducers } from 'redux';\r\nimport { AUTH_SUCCESS, ERR_MSG, RECIEVE_USER, RESET_USER, RECIEVE_OPTIONS, RECIEVE_USERS, CONNECT_SUCCESS, RECIEVE_MSG, RECIEVE_MSG_LIST, RECIEVE_UNREAD_TOTAL,RESET_USER_DETAIL } from './action-types';\r\n\r\nimport { getRedirectTo } from '../utils/index';\r\nimport { func } from 'prop-types';\r\n\r\n//目的是返回新狀態\r\n//action.type 不能重複使用...一個reducer 就用一個 ，如果共用就會都跑應該是沒有break 的關係? 所以一直往下跑\r\n\r\nconst initUser = {\r\n    userame: \"\",\r\n    gender: \"\",\r\n    msg: \"\", //錯誤訊息\r\n    redirectTo: \"\", //驗證成功才會跳轉\r\n}\r\n//user 狀態\r\n//存放後台傳來的訊息\r\nfunction user(state = initUser, action) {\r\n    switch (action.type) {\r\n        case AUTH_SUCCESS: //data 是user            \r\n            const { gender, isRegist } = action.data;\r\n            return { ...action.data, redirectTo: getRedirectTo(isRegist) }; //{...state,...action.data} 也可以這樣寫，可以把裡面的值解構出來，並取代\r\n        case ERR_MSG:   //data 是 msg\r\n            return { ...state, msg: action.data };\r\n        case RECIEVE_USER:   //data 是 user \r\n            console.log(\"RECIEVE_USER\");\r\n            return action.data; //不需要跳轉\r\n        case RESET_USER:   //data 是 msg\r\n            console.log(\"RESET_USER\", { ...initUser, msg: action.data });\r\n            return { ...initUser, msg: action.data }; //更新失敗就整個頁面讓他清空吧\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst initUserDetail = {\r\n    username: \"\",\r\n    nickname: \"\",\r\n    gender: \"\",\r\n    job: \"\",\r\n    state: \"\",\r\n    introduce: \"\",\r\n    interest: \"\",\r\n    preferType: \"\",\r\n    memberID: 0,\r\n}\r\n\r\nfunction uerDetail(state = initUserDetail, action) {\r\n    switch (action.type) {\r\n        case RECIEVE_USER:   //data 是 user \r\n            console.log(\"RECIEVE_USER\");\r\n            return action.data; //不需要跳轉\r\n        case RESET_USER_DETAIL:   //data 是 msg\r\n            console.log(\"RESET_USER_DETAIL\", { ...initUserDetail, msg: action.data });\r\n            return { ...initUserDetail, msg: action.data }; //更新失敗就整個頁面讓他清空吧\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\nconst initOption = {\r\n    interests: [\"\"],\r\n    preferTypes: [\"\"],\r\n    msg: \"\",\r\n}\r\n\r\nfunction selectOption(state = initOption, action) {\r\n    switch (action.type) {\r\n        case RECIEVE_OPTIONS:\r\n            console.log(\"RECIEVE_OPTIONS\")\r\n            return action.data;\r\n        case RESET_USER:   //data 是 msg\r\n            console.log(\"RESET_USER\");\r\n            return { ...initOption, msg: action.data }; //更新失敗就整個頁面讓他清空吧\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nconst initUserList = [];\r\n\r\nfunction userList(state = initUserList, action) {\r\n    switch (action.type) {\r\n        case RECIEVE_USERS:\r\n            console.log(\"RECIEVE_USERS\");\r\n            return action.data; //不需要跳轉\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//chathub連線\r\nconst Hubconnection = null;\r\n\r\nfunction hubConnection(state = Hubconnection, action) {\r\n    switch (action.type) {\r\n        case CONNECT_SUCCESS:\r\n            return action.data;\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nconst initMsg = []\r\n\r\nfunction msgs(state = initMsg, action) {\r\n    switch (action.type) {\r\n        case RECIEVE_MSG:\r\n            return action.data;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction msgList(state = initMsg, action) {\r\n    switch (action.type) {\r\n        case RECIEVE_MSG_LIST:\r\n            return action.data;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst ininUnread = {};\r\n\r\nfunction msgUnread(state = ininUnread, action) {\r\n    switch (action.type) {\r\n        case RECIEVE_UNREAD_TOTAL:\r\n            return action.data;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction xxx(state = 0, action) {\r\n    return state;\r\n}\r\n\r\nfunction yyy(state = 0, action) {\r\n    return state;\r\n}\r\n\r\n//以他管理state\r\nexport default combineReducers({\r\n    xxx,\r\n    yyy,\r\n    user, // {}\r\n    uerDetail,\r\n    selectOption,\r\n    userList,\r\n    //連線實體\r\n    hubConnection,\r\n    //獲取訊息\r\n    msgs,\r\n    //獲取最後的訊息\r\n    msgList,\r\n    msgUnread\r\n});\r\n\r\n//登入時\r\n//主介面路由(男、女)\r\n//進階訊息路由\r\n\r\n//判斷標準\r\n//gender\r\n//只有驗證才會跑這個 到進階訊息路由",["102","103"],"C:\\Users\\USER\\React\\social-media-client\\src\\index.js",[],["104","105"],"C:\\Users\\USER\\React\\social-media-client\\src\\utils\\index.js",[],"C:\\Users\\USER\\React\\social-media-client\\src\\containers\\memberlist\\member-list.jsx",[],"C:\\Users\\USER\\React\\social-media-client\\src\\containers\\message\\message.jsx",[],"C:\\Users\\USER\\React\\social-media-client\\src\\containers\\friends\\friends.jsx",[],"C:\\Users\\USER\\React\\social-media-client\\src\\containers\\chat\\chat.jsx",["106"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { connectToHub, getMsg,saveChatMsgs,updateToRead } from '../../redux/actions';\r\nimport { getCookies } from '../../utils/index';\r\n\r\nimport './chat.scss';\r\n\r\nimport '../../scss/main.scss';\r\nimport man from '../../assets/man.png';\r\nimport woman from '../../assets/woman2.png';\r\nimport '../personal/personal.scss';\r\n\r\nclass Chat extends Component {\r\n\r\n    state = {\r\n        msg: \"\",\r\n        unread: 0,\r\n        msgs: [\r\n            {\r\n                memberid: 0,\r\n                text: \"\",\r\n                gender: \"\",\r\n                username: \"\",\r\n            }\r\n        ],\r\n    }\r\n\r\n\r\n    //自定義的資料存放\r\n    initData = {}\r\n    //初始化資料\r\n    initPassData = () => {\r\n        const path = this.props.location.pathname;\r\n        const pathAr = path.split(\"/\");\r\n        const names = pathAr[2].split(\"+\");\r\n        const userid = getCookies();\r\n        return {\r\n            memberid: userid,\r\n            recieveid: names[1],\r\n        }\r\n    }\r\n\r\n    handleInput = (e) => {\r\n        this.setState({ msg: e.target.value })\r\n    }\r\n\r\n    handleEnter = (e) => {\r\n        //enter也能輸入訊息\r\n        if (e.nativeEvent.keyCode === 13) {\r\n            this.sendMsg();\r\n        }\r\n    }\r\n\r\n    //發送訊息\r\n    sendMsg = () => {\r\n        //取得userid 跟 recieveid\r\n        const { memberid, recieveid } = this.initData;\r\n        const msg = this.state.msg;\r\n\r\n        //儲存訊息\r\n        this.props.saveChatMsgs({memberid,recieveid,input:msg});\r\n\r\n        //激發 chathub 裡面的方法名\r\n        this.props.hubConnection\r\n            .invoke(\"SendBothMsg\", memberid,recieveid,msg)\r\n            .catch(err => console.log(err));\r\n\r\n        //消除輸入框\r\n        this.inputval = \"\";\r\n        this.setState({ msg: \"\" });\r\n\r\n\r\n\r\n    }\r\n\r\n    //進入聊天室\r\n    // IntoChat = () => {\r\n\r\n    //     const path = this.props.location.pathname;\r\n    //     const pathAr = path.split(\"/\");\r\n    //     const names = pathAr[2].split(\"+\");\r\n    //     console.log(\"聊天名\", names);\r\n    //     //把自己的memberid 根聊天對象的id 傳到後端，用來存放connectionid\r\n    //     this.state.HubConnection.invoke(\"AddConnectList\", names[0], names[1])\r\n    //         .catch(err => console.log(err));\r\n    // }\r\n\r\n    async componentDidMount() {\r\n        //創建一個實例\r\n        // const HubConnection = new HubConnectionBuilder()\r\n        //     .withUrl(`${process.env.REACT_APP_URL}/chathub`).withAutomaticReconnect().build();\r\n\r\n        // const name = \"hank\";\r\n        //連線\r\n        // this.setState({ name, HubConnection }, () => {\r\n\r\n        //     this.state.HubConnection.start()\r\n        //         .then(() => console.log(\"連線成功\"))\r\n        //         .then(() => this.IntoChat())\r\n        //         .catch(err => console.log(\"連線失敗\", err));\r\n        //     //監聽 chathub 裡面的await Clients.All.SendAsync(\"RecieveMsg\", content);\r\n        //     // 下面(content) 是結果，要跟chathub定義的參數數量一樣\r\n        //     this.state.HubConnection.on(\"SendBothMsg\", (user, reciever, input) => {\r\n\r\n\r\n        //         //判斷是哪個用戶說的\r\n        //         const memberid = user.memberid;\r\n        //         const text = input;\r\n\r\n        //         //如果第一次傳訊息就覆蓋過去\r\n        //         const firstmsg =this.state.msgs\r\n        //         // if(firstmsg[0].memberid===0){\r\n        //         //     this.setState({ msgs:[{...user,text}] });\r\n        //         // }\r\n\r\n        //         //把講過的話組合成陣列\r\n        //         const msgs = this.state.msgs.concat([{...user,text}]);\r\n        //         //刷新讓他渲染\r\n        //         this.setState({ msgs });\r\n        //     })\r\n        //     //測試\r\n            // this.state.HubConnection.on(\"IntoChat\", (content) => {\r\n            //     const text = content;\r\n            //     //把講過的話組合成陣列\r\n            //     //const msgs = this.state.msgs.concat([text]);\r\n            //     //刷新讓他渲染\r\n            //     //this.setState({ msgs });\r\n            // })\r\n\r\n\r\n\r\n        // });\r\n        // const path = this.props.location.pathname;\r\n        // const pathAr = path.split(\"/\");\r\n        // const names = pathAr[2].split(\"+\");\r\n        // if(!this.props.HubConnection){\r\n        //     await this.props.connectToHub(names[0])\r\n        // }\r\n\r\n        //初始化資料\r\n        const data = this.initPassData();\r\n        this.initData = { ...data };\r\n        const { memberid, recieveid } = this.initData;\r\n\r\n        //撈資料前先把後端資料庫的數據改成read\r\n        // this.props.hubConnection.invoke(\"ReadMsg\", memberid, recieveid)\r\n        //     .catch(err => console.log(err));\r\n        this.props.updateToRead({ memberid, recieveid });\r\n\r\n\r\n        //如果還沒有撈資料過\r\n        if (this.state.msgs[0].memberid === 0 || this.state.msg.length < 1) {\r\n            await this.props.getMsg({ memberid, recieveid })\r\n            const msgs = this.props.msgs;\r\n            this.setState({ msgs });\r\n        }\r\n\r\n        console.log(\"有這個實體嗎\", this.props);\r\n\r\n\r\n        this.props.hubConnection.on(\"RecieveBothMsg\", (user, input) => {\r\n\r\n            console.log(\"有接收到嗎\", user, input);\r\n            //判斷是哪個用戶說的\r\n            const memberid = user.memberid;\r\n            const text = input;\r\n\r\n            //如果第一次傳訊息就覆蓋過去\r\n            // const firstmsg = this.state.msgs\r\n            // if (firstmsg[0].memberid === 0) {\r\n            //     this.setState({ msgs: [] });\r\n            // }\r\n\r\n            //把講過的話組合成陣列\r\n            const msgs = this.state.msgs.concat([{ ...user, text }]);\r\n            //刷新讓他渲染\r\n            this.setState({ msgs });\r\n        })\r\n\r\n    }\r\n\r\n    //組件銷毀時要做的事 (生命週期)\r\n    componentWillUnmount() {\r\n        const initmsg = {\r\n            memberid: 0,\r\n            text: \"\",\r\n            gender: \"\",\r\n            username: \"\",\r\n        }\r\n        //讓state 回到一開始的狀態，下次進入會再去後台撈msg資料\r\n        this.setState({ msgs: [initmsg] })\r\n    }\r\n\r\n    render() {\r\n\r\n        //擷取用戶名\r\n        const { memberid } = this.initPassData();\r\n\r\n        //過濾到初始值\r\n        const msgs = this.state.msgs.filter(i => i.memberid !== 0);\r\n        //console.log(\"輸入的訊息\", this.state.msg);\r\n        //console.log(\"現在的訊息狀態\", msgs)\r\n\r\n        return (\r\n            <div className=\"mybody\" >\r\n                <div className=\"outborder topborder\" >\r\n                    <div className=\"container mt-3 mcbd\">\r\n                        <div className=\"row justify-content-center\">\r\n                            <div className=\"card col-7 my-2 chatbox\">\r\n                                <div className=\"mt-2\">\r\n\r\n                                    <div className=\"headerdp\">\r\n\r\n                                        <div className=\"\">\r\n                                            <img className=\"mx-3 headphoto\" src={woman} style={{ \"width\": 50 }} alt=\"\" />\r\n                                            <div className=\"headerdp chnsz\" style={{ \"verticalAlign\": \"top\" }}>台北張阿姨</div>\r\n\r\n                                        </div>\r\n\r\n\r\n                                        <div className=\" ctmsg ctmsgsf px-2\">寶貝今晚來陪我啊 </div>\r\n\r\n\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                            <div className=\"card col-7 my-2 chatbox\">\r\n                                <div className=\"mt-2\">\r\n\r\n                                    <div className=\"headerdp\">\r\n\r\n                                        <div className=\"\">\r\n                                            <img className=\"mx-3 headphoto  float-right\" src={man} style={{ \"width\": 50 }} alt=\"\" />\r\n\r\n                                        </div>\r\n\r\n\r\n                                        <div className=\" float-right mt-5 ctmsg px-2\" >閉嘴低能兒 </div>\r\n\r\n\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                            {/*訊息內容 */}\r\n                            {\r\n                                msgs.map((m, index) => (\r\n                                    m.memberid === parseInt(memberid) ?\r\n                                        <div className=\"card col-7 my-2 chatbox\" key={index}>\r\n                                            <div className=\"mt-2\">\r\n\r\n                                                <div className=\"headerdp\">\r\n                                                    {/*大頭貼*/}\r\n                                                    <div className=\"\">\r\n                                                        <img className=\"mx-3 headphoto  float-right\" src={m.gender === \"男\" ? man : woman} style={{ \"width\": 50 }} alt=\"\" />\r\n                                                    </div>\r\n\r\n                                                    <div className=\" float-right mt-5 ctmsg px-2\" >{m.text} </div>\r\n\r\n                                                </div>\r\n\r\n                                            </div>\r\n                                        </div>\r\n                                        :\r\n                                        <div className=\"card col-7 my-2 chatbox\" key={index}>\r\n                                            <div className=\"mt-2\">\r\n\r\n                                                <div className=\"headerdp\">\r\n\r\n                                                    <div className=\"\">\r\n                                                        <img className=\"mx-3 headphoto\" src={m.gender === \"男\" ? man : woman} style={{ \"width\": 50 }} alt=\"\" />\r\n                                                        <div className=\"headerdp chnsz\" style={{ \"verticalAlign\": \"top\" }}>{m.username}</div>\r\n\r\n                                                    </div>\r\n\r\n                                                    <div className=\" ctmsg ctmsgsf px-2\">{m.text} </div>\r\n\r\n\r\n                                                </div>\r\n\r\n                                            </div>\r\n                                        </div>\r\n                                ))\r\n                            }\r\n\r\n\r\n                        </div>\r\n                    </div>\r\n                    {/*輸入框*/}\r\n                    <nav className=\"nav fixed-bottom mb-3\" role=\"navigation\">\r\n                        <div className=\"container justify-content-center\">\r\n                            <div className=\"row justify-content-center\">\r\n                                <input className=\"ipsz\" type=\"text\" value={this.state.msg} onChange={this.handleInput} ref={inputval => this.inputval = inputval} onKeyPress={this.handleEnter} />\r\n                                <button className=\"btn btn-secondary\" onClick={this.sendMsg}>送出</button>\r\n                            </div>\r\n                        </div>\r\n                    </nav>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state => ({ hubConnection: state.hubConnection, msgs: state.msgs }),\r\n    { connectToHub, getMsg,saveChatMsgs,updateToRead }\r\n)(Chat);","C:\\Users\\USER\\React\\social-media-client\\src\\containers\\main\\main.jsx",["107","108","109"],"C:\\Users\\USER\\React\\social-media-client\\src\\containers\\personal\\personal.jsx",["110","111"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { getCookies } from '../../utils/index';\r\nimport { getPersonal, getSelectOption, logout } from '../../redux/actions';\r\n\r\nimport './personal.scss';\r\nimport '../../scss/main.scss';\r\nimport man from '../../assets/man.png';\r\nimport woman from '../../assets/woman2.png';\r\nimport { string } from 'prop-types';\r\nclass Personal extends Component {\r\n\r\n    state = {\r\n        job: \"\",\r\n        username: \"\",\r\n        nickname: \"\",\r\n        state: \"\",\r\n        preferType: [],\r\n        interest: [],\r\n        introduce: \"\",\r\n        getdata: false,\r\n        getOption: false,\r\n    }\r\n\r\n    //暫時用不到的上船大頭貼\r\n    uploadPhoto = (e) => {\r\n        console.log(e.target.value);\r\n        console.log(this.refs.file.files);\r\n    }\r\n\r\n    //這邊好像怪怪的 這邊用 promise 在跑完ajax 後 才從user取值\r\n    async componentDidMount() {\r\n        const memberid = getCookies();\r\n        if (!this.state.getdata) {\r\n            await this.props.getPersonal({ memberid });\r\n            //這個的權重好像會比 ajax前面\r\n            //應該是說他是開另外一個線去跑ajax\r\n            const { username, nickname, job, state, introduce } = this.props.user;\r\n            //console.log(\"個人訊息P\",this.props.user);\r\n            this.setState({ username, nickname, job, state, introduce, getdata: true });\r\n        }\r\n\r\n        if (!this.state.getOption) {\r\n            this.props.getSelectOption();\r\n            this.setState({ getOption: true });\r\n        }\r\n\r\n    }\r\n\r\n    //蒐集數據\r\n    handleInput = (name, event) => {\r\n        const val = event.target.value;\r\n        //取到要儲存的陣列\r\n        let checkarr = this.state[name]; //取道屬性的值\r\n        //console.log(\"string屬性\",typeof (String)); //fuction 有夠低能\r\n        console.log(\"這是什麼\", { [name]: val });\r\n\r\n        if (typeof (checkarr) !== \"string\") {\r\n            if (!checkarr.find(i => i === val)) {\r\n                checkarr.push(val);\r\n            }\r\n\r\n            console.log(\"是陣列嗎\", checkarr);\r\n            this.setState({ [name]: checkarr });\r\n            return;\r\n        }\r\n        this.setState({ [name]: val });\r\n    }\r\n\r\n    //儲存資料\r\n    updateUser = () => {\r\n        console.log(\"儲存資料\");\r\n    }\r\n\r\n    //登出\r\n    logout = () => {\r\n        this.props.logout();\r\n        this.props.history.replace('/login');\r\n        console.log(\"登出\");\r\n    }\r\n\r\n\r\n    render() {\r\n        const { username, nickname, state, introduce } = this.state;\r\n        const { selectOption, user } = this.props;\r\n\r\n        return (\r\n            <div className=\"mybody\">\r\n                <div className=\"outborder topborder\">\r\n                    <div className=\"container mt-3\">\r\n                        <div className=\"row justify-content-center\">\r\n\r\n                            <img className=\"mx-3 headphoto\" src={user.gender === \"男\" ? man : woman} style={{ \"width\": 100 }} alt=\"\" />\r\n\r\n\r\n                            <div className=\"col-xs align-self-center\">\r\n                                <h5>{user.username}</h5>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                    <p></p>\r\n                    <div className=\"container mt-10\">\r\n                        <div className=\"row justify-content-center \">\r\n\r\n                            <form className=\"col-6 col-md-4\">\r\n                                <aside>姓名</aside>\r\n                                <input className=\"form-control my-1\" type=\"text\" placeholder=\"請輸入姓名\" onChange={e => { this.handleInput(\"nickname\", e) }} value={nickname} />\r\n                                <p></p>\r\n\r\n\r\n                                <aside>狀態</aside>\r\n                                <input className=\"form-control my-1\" type=\"text\" placeholder=\"狀態\" onChange={e => { this.handleInput(\"state\", e) }} value={state} />\r\n                                <p></p>\r\n                                <aside>興趣\r\n                                    <select className=\"my-1 ml-2\" name=\"\" id=\"\" onChange={e => { this.handleInput(\"interest\", e) }}>\r\n                                        <option disabled value=\"\">請選擇</option>\r\n                                        {selectOption.interests.map((item, index) => <option value={item} key={index}>{item}</option>)}\r\n                                    </select>\r\n                                </aside>\r\n                                <input className=\"form-control my-1\" type=\"text\" placeholder=\"興趣\" />\r\n\r\n                                <p></p>\r\n\r\n                                <aside>偏好類型\r\n                                    <select className=\"my-1 ml-2\" name=\"\" id=\"\" onChange={e => { this.handleInput(\"interest\", e) }}>\r\n                                        <option disabled value=\"\">請選擇</option>\r\n                                        {selectOption.preferTypes.map((item, index) => <option value={item} key={index}>{item}</option>)}\r\n                                    </select>\r\n                                </aside>\r\n                                <input className=\"form-control my-1\" type=\"text\" placeholder=\"偏好類型\" />\r\n\r\n                                <p></p>\r\n                                <aside>個人簡介</aside>\r\n                                <textarea className=\"form-control my-1\" name=\"\" id=\"\" cols=\"25\" rows=\"3\" onChange={e => { this.handleInput(\"introduce\", e) }} value={introduce} />\r\n                                <p></p>\r\n                                <div className=\"col\">\r\n                                    <button className=\"btn btn-primary my-1 mb-5\" onClick={this.updateUser}>保存</button>\r\n                                    <button className=\"btn btn-outline-success my-1 mb-5 float-right\" onClick={this.logout}>退出登入</button>\r\n\r\n                                </div>\r\n\r\n\r\n                            </form>\r\n\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state => ({ user: state.user, selectOption: state.selectOption }),\r\n    { getPersonal, getSelectOption, logout }\r\n)(Personal);","C:\\Users\\USER\\React\\social-media-client\\src\\components\\user-list\\user-list.jsx",[],"C:\\Users\\USER\\React\\social-media-client\\src\\components\\friend-list\\friend-list.jsx",[],"C:\\Users\\USER\\React\\social-media-client\\src\\containers\\profile\\profile.jsx",["112","113","114"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport { getCookies } from '../../utils/index';\r\nimport { getUserDetail, addFriend, delFriend } from '../../redux/actions';\r\nimport ProfileDetail from '../../components/profile-detail/profile-detail';\r\n\r\nimport '../personal/personal.scss';\r\nimport man from '../../assets/man.png';\r\nimport woman from '../../assets/woman2.png';\r\n\r\nclass MyProfile extends Component {\r\n\r\n\r\n    addFriend = ({ memberid, friendid }) => {\r\n        this.props.addFriend({ memberid, friendid });\r\n    }\r\n\r\n    delFriend = ({ memberid, friendid }) => {\r\n\r\n        this.props.delFriend({ memberid, friendid });\r\n    }\r\n\r\n    componentDidMount() {\r\n        //擷取要抓的用戶名\r\n        const memberid = getCookies();\r\n        const path = this.props.location.pathname;\r\n        const routeparam = path.split(\"/\");\r\n        console.log(\"用戶資料\", routeparam);\r\n        this.props.getUserDetail({ memberid, username: routeparam[2] });\r\n    }\r\n\r\n    // goChat = (userid = 1) => {\r\n        \r\n    //     this.props.history.push(`/chat/${userid}`)\r\n    // }\r\n\r\n    render() {\r\n\r\n        //const userInfo = this.props.user;\r\n        \r\n\r\n        return (\r\n            <ProfileDetail userInfo={this.props.uerDetail} addFriend={this.addFriend} delFriend={this.delFriend} />\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state => ({ uerDetail: state.uerDetail }),\r\n    { getUserDetail, addFriend, delFriend }\r\n)(MyProfile);",["115","116"],"C:\\Users\\USER\\React\\social-media-client\\src\\components\\not-found\\not-found.jsx",[],"C:\\Users\\USER\\React\\social-media-client\\src\\components\\profile-detail\\profile-detail.jsx",[],"C:\\Users\\USER\\React\\social-media-client\\src\\redux\\action-types.js",[],"C:\\Users\\USER\\React\\social-media-client\\src\\containers\\register\\register.jsx",["117"],"C:\\Users\\USER\\React\\social-media-client\\src\\api\\index.js",[],"C:\\Users\\USER\\React\\social-media-client\\src\\api\\hubHelper.js",[],{"ruleId":"118","severity":1,"message":"119","line":318,"column":15,"nodeType":"120","messageId":"121","endLine":318,"endColumn":23},{"ruleId":"118","severity":1,"message":"119","line":325,"column":15,"nodeType":"120","messageId":"121","endLine":325,"endColumn":23},{"ruleId":"122","severity":1,"message":"123","line":105,"column":37,"nodeType":"124","endLine":105,"endColumn":172},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"118","severity":1,"message":"129","line":5,"column":10,"nodeType":"120","messageId":"121","endLine":5,"endColumn":14},{"ruleId":"118","severity":1,"message":"130","line":21,"column":21,"nodeType":"120","messageId":"121","endLine":21,"endColumn":27},{"ruleId":"125","replacedBy":"131"},{"ruleId":"127","replacedBy":"132"},{"ruleId":"125","replacedBy":"133"},{"ruleId":"127","replacedBy":"134"},{"ruleId":"118","severity":1,"message":"135","line":166,"column":19,"nodeType":"120","messageId":"121","endLine":166,"endColumn":27},{"ruleId":"118","severity":1,"message":"136","line":5,"column":8,"nodeType":"120","messageId":"121","endLine":5,"endColumn":18},{"ruleId":"118","severity":1,"message":"137","line":15,"column":22,"nodeType":"120","messageId":"121","endLine":15,"endColumn":35},{"ruleId":"122","severity":1,"message":"138","line":183,"column":21,"nodeType":"124","endLine":183,"endColumn":50},{"ruleId":"118","severity":1,"message":"139","line":11,"column":10,"nodeType":"120","messageId":"121","endLine":11,"endColumn":16},{"ruleId":"118","severity":1,"message":"140","line":85,"column":17,"nodeType":"120","messageId":"121","endLine":85,"endColumn":25},{"ruleId":"118","severity":1,"message":"141","line":3,"column":10,"nodeType":"120","messageId":"121","endLine":3,"endColumn":18},{"ruleId":"118","severity":1,"message":"142","line":10,"column":8,"nodeType":"120","messageId":"121","endLine":10,"endColumn":11},{"ruleId":"118","severity":1,"message":"143","line":11,"column":8,"nodeType":"120","messageId":"121","endLine":11,"endColumn":13},{"ruleId":"125","replacedBy":"144"},{"ruleId":"127","replacedBy":"145"},{"ruleId":"122","severity":1,"message":"138","line":55,"column":21,"nodeType":"124","endLine":55,"endColumn":50},"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-native-reassign",["146"],"no-negated-in-lhs",["147"],"'func' is defined but never used.","'gender' is assigned a value but never used.",["146"],["147"],["146"],["147"],"'memberid' is assigned a value but never used.","'MemberInfo' is defined but never used.","'getRedirectTo' is defined but never used.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'string' is defined but never used.","'username' is assigned a value but never used.","'Redirect' is defined but never used.","'man' is defined but never used.","'woman' is defined but never used.",["146"],["147"],"no-global-assign","no-unsafe-negation"]